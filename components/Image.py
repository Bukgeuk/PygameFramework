from __future__ import annotations

from typing import Optional, final

import pygame

from .Base import DynamicObject, InteractiveDisplayObject, Pos


class Image(InteractiveDisplayObject):
    def __init__(self, path: Optional[str] = None, pos: Pos = (0, 0), _pygameSurface: Optional[pygame.surface.Surface] = None) -> None:
        '''
        if _pygameSurface is given, Image is generated by using it.
        '''
        if _pygameSurface is not None:
            self.__image = _pygameSurface
        elif path is not None:
            self.__image: pygame.surface.Surface = pygame.image.load(path)
        else:
            raise Exception("path is None")
            
        super().__init__(pos, self.__image.get_size())

    @final
    def getPygameImage(self) -> pygame.surface.Surface:
        return self.__image

    @final
    def rescale(self, size: Pos) -> Image:
        self.__image = pygame.transform.scale(self.__image, size)
        self.setSize(size)
        return self

class DynamicImage(Image, DynamicObject):
    def __init__(self, path: Optional[str] = None, pos: Pos = (0, 0), image: Optional[Image] = None, _pygameSurface: Optional[pygame.surface.Surface] = None) -> None:
        '''
        if image or _pygameSurface is given, Image is generated by using it.
        '''
        if not image is None:
            _pygameSurface = image.getPygameImage()

        super().__init__(path, pos, _pygameSurface)

    def getPygameSurface(self) -> pygame.surface.Surface:
        return self.getPygameImage()